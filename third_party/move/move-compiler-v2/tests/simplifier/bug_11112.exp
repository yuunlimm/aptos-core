// ---- Model Dump
module 0xcafe::vectors {
    use std::vector;
    private fun test_for_each_mut() {
        {
          let v: vector<u64> = Vector<u64>(1, 2, 3);
          {
            let s: u64 = 2;
            {
              let (v$0$: &mut vector<u64>) = Tuple(Borrow(Mutable)(v));
              {
                let i: u64 = 0;
                loop {
                  if Lt<u64>(i, vector::length<u64>(v$0$)) {
                    {
                      let (e: &mut u64) = Tuple(vector::borrow_mut<u64>(v$0$, i));
                      e = s;
                      s: u64 = Add<u64>(s, 1)
                    };
                    i: u64 = Add<u64>(i, 1)
                  } else {
                    break
                  }
                }
              }
            };
            if Eq<vector<u64>>(v, Vector<u64>(2, 3, 4)) {
              Tuple()
            } else {
              Abort(0)
            };
            Tuple()
          }
        }
    }
    spec fun $test_for_each_mut();
} // end 0xcafe::vectors
