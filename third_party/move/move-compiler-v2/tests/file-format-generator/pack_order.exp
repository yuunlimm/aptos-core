============ initial bytecode ================

[variant baseline]
fun pack_unpack::pack1($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t0, $t1, $t2)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack2($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t0, $t2, $t1)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack3($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t1, $t0, $t2)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack4($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t2, $t0, $t1)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack5($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t1, $t2, $t0)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack6($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t2, $t1, $t0)
  1: return $t3
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun pack_unpack::pack1($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t0, $t1, $t2)
     # live vars: $t3
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack2($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t0, $t2, $t1)
     # live vars: $t3
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack3($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t1, $t0, $t2)
     # live vars: $t3
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack4($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t2, $t0, $t1)
     # live vars: $t3
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack5($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t1, $t2, $t0)
     # live vars: $t3
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack6($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     # live vars: $t0, $t1, $t2
  0: $t3 := pack pack_unpack::S($t2, $t1, $t0)
     # live vars: $t3
  1: return $t3
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.pack_unpack {
struct S {
	f1: u8,
	f2: u8,
	f3: u8
}

pack1(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u8)
	1: MoveLoc[1](Arg1: u8)
	2: MoveLoc[2](Arg2: u8)
	3: Pack[0](S)
	4: Ret
}
pack2(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u8)
	1: MoveLoc[2](Arg2: u8)
	2: MoveLoc[1](Arg1: u8)
	3: Pack[0](S)
	4: Ret
}
pack3(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 2 */ {
B0:
	0: MoveLoc[1](Arg1: u8)
	1: MoveLoc[0](Arg0: u8)
	2: MoveLoc[2](Arg2: u8)
	3: Pack[0](S)
	4: Ret
}
pack4(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 3 */ {
B0:
	0: MoveLoc[2](Arg2: u8)
	1: MoveLoc[0](Arg0: u8)
	2: MoveLoc[1](Arg1: u8)
	3: Pack[0](S)
	4: Ret
}
pack5(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 4 */ {
B0:
	0: MoveLoc[1](Arg1: u8)
	1: MoveLoc[2](Arg2: u8)
	2: MoveLoc[0](Arg0: u8)
	3: Pack[0](S)
	4: Ret
}
pack6(Arg0: u8, Arg1: u8, Arg2: u8): S /* def_idx: 5 */ {
B0:
	0: MoveLoc[2](Arg2: u8)
	1: MoveLoc[1](Arg1: u8)
	2: MoveLoc[0](Arg0: u8)
	3: Pack[0](S)
	4: Ret
}
}
