============ initial bytecode ================

[variant baseline]
public fun vector::remove<#0>($t0: &mut vector<#0>, $t1: u64): #0 {
     var $t2: #0
     var $t3: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
  0: $t5 := freeze_ref($t0)
  1: $t4 := vector::length<#0>($t5)
  2: $t3 := infer($t4)
  3: $t6 := >=($t1, $t3)
  4: if ($t6) goto 5 else goto 9
  5: label L0
  6: $t7 := 1
  7: abort($t7)
  8: goto 10
  9: label L1
 10: label L2
 11: $t9 := 1
 12: $t8 := -($t3, $t9)
 13: $t3 := infer($t8)
 14: label L3
 15: $t10 := <($t1, $t3)
 16: if ($t10) goto 17 else goto 26
 17: label L5
 18: $t11 := infer($t0)
 19: $t12 := infer($t1)
 20: $t15 := 1
 21: $t14 := +($t1, $t15)
 22: $t1 := infer($t14)
 23: $t13 := infer($t1)
 24: vector::swap<#0>($t11, $t12, $t13)
 25: goto 28
 26: label L6
 27: goto 30
 28: label L7
 29: goto 14
 30: label L4
 31: $t2 := vector::pop_back<#0>($t0)
 32: return $t2
}


[variant baseline]
fun vector::create(): vector<u64> {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t1 := 1
  1: $t2 := 2
  2: $t3 := 3
  3: $t0 := vector($t1, $t2, $t3)
  4: return $t0
}


[variant baseline]
fun vector::test_fold() {
     var $t0: vector<u64>
     var $t1: vector<u64>
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: vector<u64>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: vector<u64>
     var $t10: &mut vector<u64>
     var $t11: bool
     var $t12: bool
     var $t13: &vector<u64>
     var $t14: u64
     var $t15: &mut vector<u64>
     var $t16: u64
     var $t17: bool
     var $t18: u64
     var $t19: u64
  0: $t2 := 1
  1: $t1 := vector($t2)
  2: $t0 := infer($t1)
  3: $t5 := infer($t0)
  4: $t6 := 0
  5: $t8 := 0
  6: $t7 := infer($t8)
  7: $t9 := infer($t5)
  8: $t10 := borrow_local($t9)
  9: vector::reverse<u64>($t10)
 10: label L0
 11: $t13 := borrow_local($t9)
 12: $t12 := vector::is_empty<u64>($t13)
 13: $t11 := !($t12)
 14: if ($t11) goto 15 else goto 21
 15: label L2
 16: $t15 := borrow_local($t9)
 17: $t14 := vector::pop_back<u64>($t15)
 18: $t16 := 0
 19: $t7 := infer($t16)
 20: goto 23
 21: label L3
 22: goto 25
 23: label L4
 24: goto 10
 25: label L1
 26: $t4 := infer($t7)
 27: $t3 := infer($t4)
 28: $t18 := 0
 29: $t17 := ==($t3, $t18)
 30: if ($t17) goto 31 else goto 33
 31: label L5
 32: goto 36
 33: label L6
 34: $t19 := 0
 35: abort($t19)
 36: label L7
 37: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun vector::remove<#0>($t0: &mut vector<#0>, $t1: u64): #0 {
     var $t2: #0
     var $t3: u64
     var $t4: u64
     var $t5: &vector<#0>
     var $t6: bool
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: &mut vector<#0>
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: &mut vector<#0>
     # live vars: $t0, $t1
  0: $t16 := copy($t0)
     # live vars: $t0, $t1, $t16
  1: $t5 := freeze_ref($t16)
     # live vars: $t0, $t1, $t5
  2: $t4 := vector::length<#0>($t5)
     # live vars: $t0, $t1, $t4
  3: $t3 := copy($t4)
     # live vars: $t0, $t1, $t3
  4: $t6 := >=($t1, $t3)
     # live vars: $t0, $t1, $t3, $t6
  5: if ($t6) goto 6 else goto 10
     # live vars:
  6: label L0
     # live vars:
  7: $t7 := 1
     # live vars: $t7
  8: abort($t7)
     # live vars: $t0, $t1, $t3
  9: goto 11
     # live vars: $t0, $t1, $t3
 10: label L1
     # live vars: $t0, $t1, $t3
 11: label L2
     # live vars: $t0, $t1, $t3
 12: $t9 := 1
     # live vars: $t0, $t1, $t3, $t9
 13: $t8 := -($t3, $t9)
     # live vars: $t0, $t1, $t8
 14: $t3 := copy($t8)
     # live vars: $t0, $t1, $t3
 15: label L3
     # live vars: $t0, $t1, $t3
 16: $t10 := <($t1, $t3)
     # live vars: $t0, $t1, $t3, $t10
 17: if ($t10) goto 18 else goto 27
     # live vars: $t0, $t1, $t3
 18: label L5
     # live vars: $t0, $t1, $t3
 19: $t11 := copy($t0)
     # live vars: $t0, $t1, $t3, $t11
 20: $t12 := copy($t1)
     # live vars: $t0, $t1, $t3, $t11, $t12
 21: $t15 := 1
     # live vars: $t0, $t1, $t3, $t11, $t12, $t15
 22: $t14 := +($t1, $t15)
     # live vars: $t0, $t3, $t11, $t12, $t14
 23: $t1 := copy($t14)
     # live vars: $t0, $t1, $t3, $t11, $t12
 24: $t13 := copy($t1)
     # live vars: $t0, $t1, $t3, $t11, $t12, $t13
 25: vector::swap<#0>($t11, $t12, $t13)
     # live vars: $t0, $t1, $t3
 26: goto 29
     # live vars: $t0
 27: label L6
     # live vars: $t0
 28: goto 31
     # live vars: $t0, $t1, $t3
 29: label L7
     # live vars: $t0, $t1, $t3
 30: goto 15
     # live vars: $t0
 31: label L4
     # live vars: $t0
 32: $t2 := vector::pop_back<#0>($t0)
     # live vars: $t2
 33: return $t2
}


[variant baseline]
fun vector::create(): vector<u64> {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t2 := 2
     # live vars: $t1, $t2
  2: $t3 := 3
     # live vars: $t1, $t2, $t3
  3: $t0 := vector($t1, $t2, $t3)
     # live vars: $t0
  4: return $t0
}


[variant baseline]
fun vector::test_fold() {
     var $t0: vector<u64>
     var $t1: vector<u64>
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: vector<u64>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: vector<u64>
     var $t10: &mut vector<u64>
     var $t11: bool
     var $t12: bool
     var $t13: &vector<u64>
     var $t14: u64
     var $t15: &mut vector<u64>
     var $t16: u64
     var $t17: bool
     var $t18: u64
     var $t19: u64
     # live vars:
  0: $t2 := 1
     # live vars: $t2
  1: $t1 := vector($t2)
     # live vars: $t1
  2: $t0 := copy($t1)
     # live vars: $t0
  3: $t5 := copy($t0)
     # live vars: $t5
  4: $t6 := 0
     # live vars: $t5
  5: $t8 := 0
     # live vars: $t5, $t8
  6: $t7 := copy($t8)
     # live vars: $t5, $t7
  7: $t9 := copy($t5)
     # live vars: $t7, $t9
  8: $t10 := borrow_local($t9)
     # live vars: $t7, $t9, $t10
  9: vector::reverse<u64>($t10)
     # live vars: $t7, $t9
 10: label L0
     # live vars: $t7, $t9
 11: $t13 := borrow_local($t9)
     # live vars: $t7, $t9, $t13
 12: $t12 := vector::is_empty<u64>($t13)
     # live vars: $t7, $t9, $t12
 13: $t11 := !($t12)
     # live vars: $t7, $t9, $t11
 14: if ($t11) goto 15 else goto 21
     # live vars: $t9
 15: label L2
     # live vars: $t9
 16: $t15 := borrow_local($t9)
     # live vars: $t9, $t15
 17: $t14 := vector::pop_back<u64>($t15)
     # live vars: $t9
 18: $t16 := 0
     # live vars: $t9, $t16
 19: $t7 := copy($t16)
     # live vars: $t7, $t9
 20: goto 23
     # live vars: $t7
 21: label L3
     # live vars: $t7
 22: goto 25
     # live vars: $t7, $t9
 23: label L4
     # live vars: $t7, $t9
 24: goto 10
     # live vars: $t7
 25: label L1
     # live vars: $t7
 26: $t4 := copy($t7)
     # live vars: $t4
 27: $t3 := copy($t4)
     # live vars: $t3
 28: $t18 := 0
     # live vars: $t3, $t18
 29: $t17 := ==($t3, $t18)
     # live vars: $t17
 30: if ($t17) goto 31 else goto 33
     # live vars:
 31: label L5
     # live vars:
 32: goto 36
     # live vars:
 33: label L6
     # live vars:
 34: $t19 := 0
     # live vars: $t19
 35: abort($t19)
     # live vars:
 36: label L7
     # live vars:
 37: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.vector {
use 0000000000000000000000000000000000000000000000000000000000000001::vector as 1vector;




public remove<Ty0>(Arg0: &mut vector<Ty0>, Arg1: u64): Ty0 /* def_idx: 0 */ {
L0:	loc2: u64
L1:	loc3: &mut vector<Ty0>
L2:	loc4: u64
L3:	loc5: u64
L4:	loc6: u64
B0:
	0: CopyLoc[0](Arg0: &mut vector<Ty0>)
	1: StLoc[2](loc0: &mut vector<Ty0>)
	2: MoveLoc[2](loc0: &mut vector<Ty0>)
	3: FreezeRef
	4: VecLen(1)
	5: StLoc[3](loc1: u64)
	6: CopyLoc[1](Arg1: u64)
	7: CopyLoc[3](loc1: u64)
	8: Ge
	9: BrFalse(13)
B1:
	10: LdU64(1)
	11: Abort
B2:
	12: Branch(13)
B3:
	13: LdU64(1)
	14: StLoc[4](loc2: u64)
	15: MoveLoc[3](loc1: u64)
	16: MoveLoc[4](loc2: u64)
	17: Sub
	18: StLoc[3](loc1: u64)
B4:
	19: CopyLoc[1](Arg1: u64)
	20: CopyLoc[3](loc1: u64)
	21: Lt
	22: BrFalse(40)
B5:
	23: CopyLoc[0](Arg0: &mut vector<Ty0>)
	24: StLoc[5](loc3: &mut vector<Ty0>)
	25: CopyLoc[1](Arg1: u64)
	26: StLoc[6](loc4: u64)
	27: LdU64(1)
	28: StLoc[7](loc5: u64)
	29: MoveLoc[1](Arg1: u64)
	30: MoveLoc[7](loc5: u64)
	31: Add
	32: StLoc[1](Arg1: u64)
	33: CopyLoc[1](Arg1: u64)
	34: StLoc[8](loc6: u64)
	35: MoveLoc[5](loc3: &mut vector<Ty0>)
	36: MoveLoc[6](loc4: u64)
	37: MoveLoc[8](loc6: u64)
	38: VecSwap(1)
	39: Branch(41)
B6:
	40: Branch(42)
B7:
	41: Branch(19)
B8:
	42: MoveLoc[0](Arg0: &mut vector<Ty0>)
	43: VecPopBack(1)
	44: Ret
}
create(): vector<u64> /* def_idx: 1 */ {
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: LdU64(3)
	3: VecPack(5, 3)
	4: Ret
}
test_fold() /* def_idx: 2 */ {
L0:	loc0: vector<u64>
L1:	loc1: vector<u64>
L2:	loc2: u64
L3:	loc3: vector<u64>
L4:	loc4: u64
L5:	loc5: u64
L6:	loc6: u64
B0:
	0: LdU64(1)
	1: VecPack(5, 1)
	2: StLoc[0](loc0: vector<u64>)
	3: CopyLoc[0](loc0: vector<u64>)
	4: StLoc[1](loc1: vector<u64>)
	5: LdU64(0)
	6: LdU64(0)
	7: StLoc[2](loc2: u64)
	8: CopyLoc[1](loc1: vector<u64>)
	9: StLoc[3](loc3: vector<u64>)
	10: MutBorrowLoc[3](loc3: vector<u64>)
	11: Call 1vector::reverse<u64>(&mut vector<u64>)
	12: Pop
B1:
	13: ImmBorrowLoc[3](loc3: vector<u64>)
	14: Call 1vector::is_empty<u64>(&vector<u64>): bool
	15: Not
	16: BrFalse(23)
B2:
	17: MutBorrowLoc[3](loc3: vector<u64>)
	18: VecPopBack(5)
	19: LdU64(0)
	20: StLoc[2](loc2: u64)
	21: Pop
	22: Branch(24)
B3:
	23: Branch(25)
B4:
	24: Branch(13)
B5:
	25: CopyLoc[2](loc2: u64)
	26: StLoc[4](loc4: u64)
	27: CopyLoc[4](loc4: u64)
	28: StLoc[5](loc5: u64)
	29: LdU64(0)
	30: StLoc[6](loc6: u64)
	31: MoveLoc[5](loc5: u64)
	32: MoveLoc[6](loc6: u64)
	33: Eq
	34: BrFalse(36)
B6:
	35: Branch(38)
B7:
	36: LdU64(0)
	37: Abort
B8:
	38: Ret
}
}
